/* -*- c -*- */
#if !defined INCLUDED_yuck_h_
#define INCLUDED_yuck_h_

#include <stddef.h>

enum yuck_cmds_e {
pushdef([last], yuck_cmd())pushdef([first], defn([last]))[]dnl
	/* value used when no command was specified */
	first,

	/* actual commands */
	foreachq([cmd], yuck_cmds(), [define([last], yuck_cmd(cmd))[]last,
	])
	/* convenience identifiers */
	YUCK_NONE = first,
	YUCK_NCMDS = last
popdef([last])popdef([first])[]dnl
};

struct yuck_s {
	enum yuck_cmds_e cmd;

	/* left-over arguments, the command string is never a part of this */
	size_t nargs;
	char *const *args;

	foreachq([slot], yuck_idents(), [yuck_slot_decl(slot);
	])
	/* depending on CMD at most one of the following structs is filled in
	 * if CMD is YUCK_NONE no slots of this union must be accessed */
	union {foreachq([cmd], yuck_cmds(), [
		/* for the cmd command */
		struct {foreachq([slot], yuck_idents(cmd), [
			yuck_slot_decl(slot, cmd);])
		} cmd;
	])};
};


pushdef([DECLF], ifdef([YUCK_HEADER], [extern], [static]))[]dnl
DECLF int yuck_parse(struct yuck_s *restrict, int argc, char *const argv[[]]);
DECLF void yuck_free(struct yuck_s *restrict);
popdef([DECLF])[]dnl

#endif	/* INCLUDED_yuck_h_ */
